name: Test and Build
on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
    tags:
      - v*

# This ensures that previous jobs for the PR are canceled when the PR is
# updated.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: download go modules
        run: make download
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          fail_on_error: true
          go_version_file: go.mod
          reporter: github-pr-review
  test:
    name: test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: restore cached modules
        uses: actions/cache/restore@v4
        with:
          key: linux-golangci-${{ hashFiles('**/go.sum') }}
          path: |
            ~/.cache/golangci-lint
            ~/.cache/go-build
            ~/go/pkg
      - name: test
        run: |
          make coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: save test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage.html
  build:
    name: build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64, arm]
        exclude:
          - os: darwin
            arch: arm
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: restore cached modules
        uses: actions/cache/restore@v4
        with:
          key: linux-golangci-${{ hashFiles('**/go.sum') }}
          path: |
            ~/.cache/golangci-lint
            ~/.cache/go-build
            ~/go/pkg
      - name: compile
        env:
          # disable CGO to make fully static binaries
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          make all
      - name: save build artifacts
        uses: actions/upload-artifact@v4
        with:
          path: bin/
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
  docker:
    name: docker build
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [linux] #, windows, darwin]
        arch: [amd64, arm64, arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: restore build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: bin/
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          flavor: latest=false
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,event=tag,pattern={{version}}
            type=semver,event=tag,pattern={{major}}
            type=sha,event=pr,format=short
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            - GOOS=${{ matrix.os }}
            - GOARCH=${{ matrix.arch }}
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=registry,name=${{ github.repository }},push-by-digest=true,name-canonical=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  manifest:
    name: publish docker manifest
    runs-on: ubuntu-latest
    needs:
      - docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ github.repository }}:${{ steps.meta.outputs.version }}
  publish:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name == 'tag' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: restore build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: bin/
      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/*
